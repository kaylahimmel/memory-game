{"version":3,"sources":["components/Card/index.js","components/Wrapper/index.js","components/Scoreboard/index.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","onClick","gamePiece","id","alt","src","image","Wrapper","Object","assign","Scoreboard","children","App","state","cards","selectedCards","score","highScore","alert","instructions","countCard","_this","filter","card","console","log","handleCardClick","clickedCards","newScore","newHighScore","newAlert","newArray","includes","push","shuffle","setState","array","i","length","j","Math","floor","random","_ref","_this2","this","components_Wrapper","components_Scoreboard","map","components_Card","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wzCAiBeA,MAdf,SAAcC,GACZ,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACfH,EAAAC,EAAAC,cAAA,QAAME,QAAS,kBAAML,EAAMM,UAAUN,EAAMO,KAAKH,UAAU,SACxDH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKK,IAAKR,EAAMQ,IAAKC,IAAKT,EAAMU,YCHzBC,SAFC,SAAAX,GAAK,OAAIC,EAAAC,EAAAC,cAAA,OAAAS,OAAAC,OAAA,CAAMT,UAAU,WAAcJ,YCIxCc,MAJf,SAAoBd,GAClB,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcJ,EAAMe,WCkG7BC,6MA9FbC,MAAQ,CACNC,MAAOA,EACPC,cAAe,GACfC,MAAO,EACPC,UAAW,EACXC,MAAO,GACPC,aAAc,mIAGhBC,UAAY,SAAAjB,GAEV,IAAMW,EAAQO,EAAKR,MAAMC,MAAMQ,OAAO,SAAAC,GAAI,OAAIA,EAAKpB,KAAOA,IAC1DqB,QAAQC,IAAIX,MAGdY,gBAAkB,SAAAvB,GAChBqB,QAAQC,IAAItB,GACZ,IAAIwB,EAAeN,EAAKR,MAAME,cAC1Ba,EAAWP,EAAKR,MAAMG,MACtBa,EAAeR,EAAKR,MAAMI,UAC1Ba,EAAWT,EAAKR,MAAMK,MACtBa,EAAWV,EAAKR,MAAMC,MAEtBa,EAAaK,SAAS7B,IAAOyB,EAAWC,GAG1CF,EAAe,GAEfC,EAAW,EAEXE,EAAW,0CAIXH,EAAaM,KAAK9B,GAIlB0B,IAFAD,GAKFG,EAAWV,EAAKa,QAAQH,GAExBV,EAAKc,SAAS,CACZpB,cAAeY,EACfX,MAAOY,EACPX,UAAWY,EACXX,MAAOY,EACPhB,MAAOiB,OAKXG,QAAU,SAAAE,GACR,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACvC,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADHM,EAEhB,CAACP,EAAMG,GAAIH,EAAMC,IAAvCD,EAAMC,GAFgCM,EAAA,GAE5BP,EAAMG,GAFsBI,EAAA,GAI3C,OAAOP,2EAIA,IAAAQ,EAAAC,KACP,OACEhD,EAAAC,EAAAC,cAAC+C,EAAD,KACEjD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACgD,EAAD,KACElD,EAAAC,EAAAC,cAAA,2BAAmB8C,KAAKhC,MAAMM,cAC9BtB,EAAAC,EAAAC,cAAA,4BAAoB8C,KAAKhC,MAAMG,OAC/BnB,EAAAC,EAAAC,cAAA,yBAAiB8C,KAAKhC,MAAMI,WAC3B4B,KAAKhC,MAAMK,OACZrB,EAAAC,EAAAC,cAAA,UACG8C,KAAKhC,MAAMK,SAKlBrB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WAAM8C,KAAKhC,MAAMC,MAAMkC,IAAI,SAAAzB,GAAI,OAC7B1B,EAAAC,EAAAC,cAACkD,EAAD,CACE/C,UAAW,kBAAM0C,EAAKlB,gBAAgBH,EAAKpB,KAC3CA,GAAIoB,EAAKpB,GACT+C,IAAK3B,EAAKpB,GACVC,IAAKmB,EAAKnB,IACVE,MAAOiB,EAAKjB,oBArFN6C,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7D,EAAAC,EAAAC,cAAC4D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2a169883.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Card(props) {\r\n  return (\r\n    <div className=\"card\">\r\n    <span onClick={() => props.gamePiece(props.id)} className=\"score\">\r\n      <div className=\"img-container\">\r\n        <img alt={props.alt} src={props.image} />\r\n      </div>\r\n      \r\n        \r\n      </span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from \"react\";\nimport \"./Wrapper.css\";\n\nconst Wrapper = props => <main className=\"wrapper\" {...props} />;\n\nexport default Wrapper;\n","import React from \"react\";\r\nimport \"./Scoreboard.css\";\r\n\r\nfunction Scoreboard(props) {\r\n  return <div className=\"scoreboard\">{props.children}</div>;\r\n}\r\n\r\nexport default Scoreboard;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport cards from \"./cards.json\";\nimport Card from \"./components/Card\"\nimport Wrapper from \"./components/Wrapper\";\nimport Scoreboard from \"./components/Scoreboard\";\n\nclass App extends Component {\n  state = {\n    cards: cards,\n    selectedCards: [],\n    score: 0,\n    highScore: 0,\n    alert: \"\",\n    instructions: \"The object of the game is to click on each card without clicking on the same card twice. See if you can collect all 16 cards!\"\n  };\n\n  countCard = id => {\n    // Filter this.state.cards for cards with an id not equal to the id being removed\n    const cards = this.state.cards.filter(card => card.id !== id);\n    console.log(cards)\n    }\n\n  handleCardClick = id => {\n    console.log(id)\n    let clickedCards = this.state.selectedCards;\n    let newScore = this.state.score;\n    let newHighScore = this.state.highScore;\n    let newAlert = this.state.alert;\n    let newArray = this.state.cards;\n    // Logic that checks the selectedCards to see if the current card selected exists in that array \n    if (clickedCards.includes(id) && newScore > newHighScore) {\n      // Logic that resets the game (the user has lost)\n      // Reassigns to initial empty array (the state of the array at the start of a new game)\n      clickedCards = [];\n      // alter the score dependent on a loss (reset to zero)\n      newScore = 0;\n      // show alert\n      newAlert = \"You already chose that one--you lose.\"; \n    } else {\n      // Win logic (user clicked unclicked card)\n      // Takes the current array and appends the clicked cards id\n      clickedCards.push(id)\n      // Alter the score dependent on a win (add to score)\n      newScore++\n      // alter high score\n      newHighScore = newScore;\n    };\n\n    newArray = this.shuffle(newArray)\n    // Set this.state.cards equal to the new cards array\n    this.setState({ \n      selectedCards: clickedCards, \n      score: newScore, \n      highScore: newHighScore,\n      alert: newAlert, \n      cards: newArray });\n  }; \n\n\n  // Shuffling function\n  shuffle = array => {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n  };\n\n  // Map over this.state.cards and render a Card component for each card object\n  render() {\n    return (\n      <Wrapper>\n        <div>\n          <Scoreboard>\n            <h6>Instructions: {this.state.instructions}</h6>\n            <h3>Current Score: {this.state.score}</h3>\n            <h4>High Score: {this.state.highScore}</h4>\n            {this.state.alert &&\n            <h1>\n              {this.state.alert}\n            </h1>\n            }\n          </Scoreboard>\n        </div>\n        <div>\n        <div>{this.state.cards.map(card => (\n          <Card\n            gamePiece={() => this.handleCardClick(card.id)}\n            id={card.id}\n            key={card.id}\n            alt={card.alt}\n            image={card.image}\n          />\n        ))}\n    </div>\n    </div>\n    </Wrapper>\n    )\n  };\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}